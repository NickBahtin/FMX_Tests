unit uMain;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,
  FMX.Menus;

  const
    cKEY_Up=38;
    cKEY_Down=40;
    cKEY_Left=37;
    cKEY_Right=39;
type
  TSnakeItemType=(sitNone,sitHeadBottom,sitHeadLeft,sitHeadRight,sitHeadTop,sitTailLeft,sitTailRight,sitTailTop,sitTailBottom,sitStone,sitFruit);

  TForm1 = class(TForm)
    MainMenu1: TMainMenu;
    MenuItem1: TMenuItem;
    MenuItem2: TMenuItem;
    MenuItem3: TMenuItem;
    MenuItem4: TMenuItem;
    procedure FormKeyDown(Sender: TObject; var Key: Word; var KeyChar: WideChar;
      Shift: TShiftState);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure MenuItem4Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);

  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  MyPosY: Word=0;
  MyPosX: Word=0;
  Form1: TForm1;
  MapArray:array[0..10,0..10] of TSnakeItemType;

implementation

{$R *.fmx}

uses uDebug;


procedure TForm1.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
  if MessageDlg('Завершить работу?', TMsgDlgType.mtConfirmation,
    [TMsgDlgBtn.mbYes, TMsgDlgBtn.mbNo], 0)<>mrYes then
       CanClose:=False;

end;

procedure TForm1.FormCreate(Sender: TObject);
var
  i: Integer;
begin
  for i := Low to High do
    for I := Low to High do



end;

procedure TForm1.FormKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: WideChar; Shift: TShiftState);
begin
//MapArray[MyPosX,MyPosY]:=False;//стираем место в массиве,где были
  case Key of
  cKEY_Up: begin
    if MyPosY = 0 then
      begin
         // (ничего не делаем)
      end
      else
      begin
      MyPosY:=MyPosY-1;
       if MapArray[MyPosX,MyPosY] = false then
         begin
         Rec.Position.Y:=Rec.Position.Y-Rec.Height;//Если место куда хотим переместиться свободно - перемещаемся
         end
         else begin
         MyPosY:=MyPosY+1;//Если место занято - ничего не меняем
         end;
      end;

  end;
  cKEY_Down: begin
    if MyPosY = 10 then
      begin
         // (ничего не делаем)
      end
      else
      begin
          MyPosY:=MyPosY+1;
          if MapArray[MyPosX,MyPosY] = false then
          begin
          Rec.Position.Y:=Rec.Position.Y+Rec.Height;//Если место куда хотим переместиться свободно - перемещаемся
          end
          else begin
          MyPosY:=MyPosY-1;//Если место занято - ничего не меняем
          end;
      end;
  end;
  cKEY_Left: begin
    if MyPosX = 0 then
      begin
         // (ничего не делаем)
      end
      else
      begin
       MyPosX:=MyPosX-1;
       if MapArray[MyPosX,MyPosY] = false then
         begin
         Rec.Position.X:=Rec.Position.X-Rec.width;//Если место куда хотим переместиться свободно - перемещаемся
         end
         else begin
         MyPosX:=MyPosX+1;//Если место занято - ничего не меняем
         end;
      end;

  end;
  cKEY_Right: begin
    if MyPosX = 10 then
      begin
         // (ничего не делаем)
      end
      else
      begin
       MyPosX:=MyPosX+1;
       if MapArray[MyPosX,MyPosY] = false then
         begin
         Rec.Position.X:=Rec.Position.X+Rec.width;//Если место куда хотим переместиться свободно - перемещаемся
         end
         else begin
         MyPosX:=MyPosX-1;//Если место занято - ничего не меняем
         end;
      end;
;

  end;
  end;
//  Caption:=IntToStr(Key);
 Text1.text:=Format('X=%d Y=%d',[Round(Rec.Position.X / Rec.width),Round(Rec.Position.Y / Rec.Height)]);
 MapArray[MyPosX,MyPosY]:=True; // отмечаем в массиве, где наш квадрат
 DebugForm.UpdateGrid;
end;




procedure TForm1.MenuItem4Click(Sender: TObject);
begin
  DebugForm.Show
end;

end.
