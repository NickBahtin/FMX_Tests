unit uLogReaderThread;

interface

uses
  System.SysUtils, System.Classes, System.Threading;

type
  TLogReaderThread = class(TThread)
  private
    FFileName: string;
    FOnLogRead: TNotifyEvent;
    FLogContent: string;
  protected
    procedure Execute; override;
  public
    constructor Create(AFileName: string; AOnLogRead: TNotifyEvent);
    property OnLogRead: TNotifyEvent read FOnLogRead write FOnLogRead;
    property LogContent: string read FLogContent;
  end;
implementation

{ TLogReaderThread }

constructor TLogReaderThread.Create(AFileName: string;
  AOnLogRead: TNotifyEvent);
begin
  inherited Create(False);
  FFileName := AFileName;
  FOnLogRead := AOnLogRead;
end;

procedure TLogReaderThread.Execute;
var
  FileStream: TFileStream;
  Buffer: TBytes;
  Size: Integer;
begin
  FileStream := TFileStream.Create(FFileName, fmOpenRead or fmShareDenyNone);
  try
    Size := FileStream.Size;
    SetLength(Buffer, Size);
    FileStream.ReadBuffer(Buffer[0], Size);
    FLogContent := TEncoding.UTF8.GetString(Buffer);
  finally
    FileStream.Free;
  end;
  if Assigned(FOnLogRead) then
    Synchronize(procedure
    begin
      FOnLogRead(Self);
    end);
end;
end.
